
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id Int @id @default(autoincrement())
  cretedAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  email String @unique
  password String
  name String @default("")
  phone String @unique @default("")
  
  avatarPath String @default("/uploads/default-avatar.png") @map("avatar_path")

  reviews Review[]
  orders Order[]
  favorites Favorite[]

  @@map("user")

}



model Product {
  id Int @id @default(autoincrement())
  cretedAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  name String @unique
  slug String @unique
  description String
  price Int
  images String[]
  rank Int @default(0)
  discount Int @default(0)

  categoryId Int @map("category_id")
  category Category @relation(fields: [categoryId], references: [id])

  reviews Review[] 
  orderItems OrderItem[]

  users Favorite[]

}

model Favorite {
  userId    Int @map("user_id")
  productId Int @map("product_id")
  user      User    @relation(fields: [userId], references: [id])
  product   Product @relation(fields: [productId], references: [id])

  @@id([userId, productId])
}

model Category {
  id Int @id @default(autoincrement())
  cretedAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  name String @unique
  slug String @unique

  products Product[]
}

model Review {
  id Int @id @default(autoincrement())
  cretedAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  rating Int
  text String

  userId Int @map("user_id")
  productId Int @map("product_id")

  user User @relation(fields: [userId], references: [id])
  product Product @relation(fields: [productId], references: [id])
}

model Order {
  id Int @id @default(autoincrement())
  cretedAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  status EnumOrderStatus @default(PENDING)
  items OrderItem[]
  total Int

  userId Int? @map("user_id")
  user User? @relation(fields: [userId], references: [id])

  @@map("order")
}

model OrderItem {
  id String @id @default(cuid())
  cretedAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  quantity Int
  price Int

  orderId Int? @map("order_id")

  order Order? @relation(fields: [orderId], references: [id])
  product Product? @relation(fields: [productId], references: [id])
  productId Int? @map("product_id")

  @@map("order_item")
}

enum EnumOrderStatus {
  PENDING
  PAYED
  SHIPPED
  DELIVERED
}